---
title: Installing and Configuring Tanzu Service Manager for Dev Purpose
owner: Platform Engineering (TSMGR Team)
---
<strong><%= modified_date %></strong>

This topic describes how to install and configure
<%= vars.product_full %> (<%= vars.product_short %>) for dev using Helm.

<p class="note">
   This dev document is target to quick install for <%= vars.product_short %> with the purpose of testing or learning.
  This is <strong>NOT SECURE FOR PRODUCTION</strong>. For production install see
  <a href="installing.html">Installing and Configuring <%= vars.product_full %></a>
</p>

## <a id="overview"></a> Overview

Helm is a Kubernetes open source package manager.
You can use a Helm chart to install and configure <%= vars.product_short %>.

To install and configure <%= vars.product_short %> using Helm:

1. [Get <%= vars.product_short %> Resources From <%= vars.product_network %>](#get)

1. [Install the <%= vars.product_short %> CLI](#cli)

1. [Configure the <%= vars.product_short %> Helm Chart](#configure)

1. [Install the Helm Chart](#install)

## <a id="prereq"></a>Prerequisites

### For <%= vars.product_short %> installation

Before you install <%= vars.product_short %> using Helm:

* **Helm 3 CLI (version 3.2.4 or up):** For information about installing the Helm CLI,
see the [Helm documentation](https://helm.sh/docs/intro/install/).

* **Docker CLI:** For information about installing Docker, see [Docker](https://docs.docker.com/get-docker/).

* **A Kubernetes Cluster:** A running Kubernetes cluster. <%= vars.product_short %> supports
<%= vars.k8s_runtime_full %> clusters.
For supported cluster versions, see the [Product Snapshot](index.html#snapshot).
For information about <%= vars.k8s_runtime_abbr %>, see
[<%= vars.k8s_runtime_full %>](https://docs.pivotal.io/pks/index.html).

* **Kubernetes CLI:** See [Install and Set Up kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)

* **Verify that a default StorageClass exists on the cluster where you want to install
<%= vars.product_short %>:**
If you are using Tanzu Kubernetes Grid Integrated Edition, see
[Specify a Default StorageClass](https://docs.pivotal.io/tkgi/1-8/volumes.html#default-storage-class).
For more information about Storage Classes, see
[Kubernetes documentation](https://kubernetes.io/docs/concepts/storage/storage-classes/).

### For usage with <%= vars.app_runtime_abbr %>

A complete experience allows you to create cf services from <%= vars.product_short %> offers. For that you will
also need to have:

* **<%= vars.app_runtime_abbr %> Deployment:** A running <%= vars.app_runtime_abbr %> deployment.

* **<%= vars.app_runtime_abbr %> CLI:** See [Cloud Foundry CLI](https://github.com/cloudfoundry/cli)

## Two Installation Options

You can install the <%= vars.product_short %> environment in two ways:

1. Using `install-dev.sh` script:
    The `install-dev.sh` script automates the installation steps. Using this option you will only be required
    to download files and provide private registry endpoint, username and password.
1. Install manually:
    This option will require more interactivity from you, but you can have a more comprehensive understanding of
    what is happening.

## Installing Using install-dev.sh Script

<p class="note">
If you want to install manually instead of using the install-dev.sh script,
skip to <a href="#install-manually">Installing Manually</a> section
</p>

1. This approach requires a image private registry that will be used to upload the docker installation images,
so start by verifying and recording your private registry endpoint, username and password.

1. Get <%= vars.product_short %> Resources From <%= vars.product_network %>:
   Log in and navigate to **<%= vars.product_full %> (<%= vars.product_short %>)** in
       [<%= vars.product_network %>](https://network.pivotal.io/products/tanzu-service-manager)
       and download the following resources:
       + **The <%= vars.product_short %> Command Line Interface (CLI):** Click **CLIs** and download
       the CLI for your operating system.
       + **<%= vars.product_short %> Helm chart TGZ file:** Click **Helm Chart for <%= vars.product_short %>** and
       download the Helm chart TGZ file.
       + **Images**: Click **Images** and download the daemon, broker, minio and chartmuseum Docker images
       + **install-dev.sh script**: Click **<%= vars.product_short %> Dev Environment Installer** and download the install-dev.sh file

1. Make the install-dev.sh file executable by executing the `chmod +x install-dev.sh` command
1. You need to provide the registry endpoint, username and password during the installation. To do that you can either:
  + Execute the `./install-dev.sh` command and answer the registry details questions, or
  + Create a registry.yaml file containing the needed information in the following format, and execute the `install-dev.sh registry.yaml` command

    #### registry.yaml template
    ```yaml
    registry: <my-registry-endpoint>/<project>/<repository>
    username: <username>
    password: <password>
    ```

1. Use the command `kubectl get services -n sm` to monitor the provisioning of the External IPs for daemon and broker services
1. Once the External IP is available for the daemon, you can configure the <%= vars.product_short %> environment variables by running the
  `source ./setSmEnv.sh` command
1. Once the External IP is available for the broker, you can configure <%= vars.product_short %> for cf by running the following script:

    ```bash
    ./setCfDetails.sh <broker-name> <cf-api-endpoint> <cf-api-client> <cf-api-client-secret>
     where:
        <broker-name>     - is a name you will provide to your broker to be identified in cf
        <cf-api-endpoint> - is the cf endpoint. You can verify that by executing the "cf target" command
        <cf-api-endpoint> - is the cf client
        <cf-api-endpoint> - is the cf client secret
    ```

1. Test the <%= vars.product_short %> by calling `<%= vars.product_cli %> version` or `<%= vars.product_cli %> offer list` commands
1. You're done here! Jump to [Next Steps](#next-steps)

## <a id='install-manually'></a>Installing Manually

### <a id='get'></a> Get <%= vars.product_short %> Resources From <%= vars.product_network %>

To get the resources needed from <%= vars.product_network %> to install <%= vars.product_short %>:

1. Log in and navigate to **<%= vars.product_full %> (<%= vars.product_short %>)** in
[<%= vars.product_network %>](https://network.pivotal.io/products/tanzu-service-manager).

1. Get the following resources:
    + **The <%= vars.product_short %> Command Line Interface (CLI):** Click **CLIs** and download
    the CLI for your operating system.
    + **<%= vars.product_short %> Helm chart TGZ file:** Click **<%= vars.product_cli %>-VERSION-NUMBER.tgz** and download the Helm chart
    for <%= vars.product_short %>.
    + **values-dev.yaml file:** download the values-dev.yaml override configuration file.

### <a id='cli'></a>  Install the <%= vars.product_short %> CLI

To install the <%= vars.product_short %> Command Line Interface (CLI):

1. Rename the downloaded <%= vars.product_short %> CLI file as `<%= vars.product_cli %>`.

1. Make the <%= vars.product_short %> binary act as an executable file by running:

    ```bash
    chmod +x <%= vars.product_cli %>
    ```

1. Move the binary file into your `PATH` by running:

    ```bash
    mv <%= vars.product_cli %> /usr/local/bin/<%= vars.product_cli %>
    ```

1. Ensure <%= vars.product_short %> CLI is properly working:

    ```bash
    <%= vars.product_cli %> version
    ```

### <a id='configure'></a> Configure the <%= vars.product_short %> Helm Chart

To configure the <%= vars.product_short %>, edit the `values-dev.yaml` file:

1. Add the credentials for the Tanzu Network registry:

    ```yaml
    imageCredentialsFor<%= vars.product_short %>Images:
     registry: registry.pivotal.io
     username: REGISTRY-USERNAME
     password: REGISTRY-PASSWORD
    ```

    Where:
    + `REGISTRY-USERNAME` is your Tanzu Network username.
    + `REGISTRY-PASSWORD` is your Tanzu Network password.

 1. (Recommended) Set unique passwords:

    The `values-dev.yaml` is pre configured with default passwords, but we recommend they be changed
    to unique passwords in these sections:

    ```yaml
    broker:
      password: DevPassword
    ```

    ```yaml
    daemon:
      password: DevPassword
    ```

    ```yaml
    chartmuseum:
      env:
        open:
          BASIC_AUTH_PASS: "chartpass"
    ```

    ```yaml
    minio:
      accessKey:
        password: DevPassword
      secretKey:
        password: DevPassword
    ```

### <a id='install'></a> Install the <%= vars.product_short %> Helm Chart

To install the <%= vars.product_short %> Helm chart:

1. From the root level of the chart, install the <%= vars.product_short %> Helm chart by running these commands:

    ```bash
    kubectl create ns <%= vars.product_short %>-NAMESPACE
    helm install RELEASE-NAME <%= vars.product_cli %>-VERSION-NUMBER.tgz  -n <%= vars.product_short %>-NAMESPACE --wait -f values-dev.yaml
    ```

    Where:
    + `<%= vars.product_short %>-NAMESPACE` is a name you choose for the <%= vars.product_short %> dedicated namespace.
    + `RELEASE-NAME` is a name you choose for the release.
    + `<%= vars.product_cli %>-VERSION-NUMBER.tgz` is the <%= vars.product_short %> Helm Chart file you downloaded earlier.

### <a id='configure-for-cf'></a> Configure  <%= vars.product_short %> for cf

1. Retrieve the broker IP address by running:

    ```bash
    export BROKER_IP=$(kubectl get service <%= vars.product_cli %>-<%= vars.product_cli %>-broker -n <%= vars.product_short %>-NAMESPACE -o=jsonpath='{@.status.loadBalancer.ingress[0].ip}')
    ```

   <p class="note">
   Other Kubernetes providers may be host based (for example, Amazon's EKS) rather than IP based:
   </p>

   ```bash
   export BROKER_IP=$(kubectl get service <%= vars.product_cli %>-<%= vars.product_cli %>-broker -n <%= vars.product_short %>-NAMESPACE -o=jsonpath='{@.status.loadBalancer.ingress[0].hostname}'
   ```

1. Upgrade your <%= vars.product_short %> Helm release by running:

    ```bash
    helm upgrade RELEASE-NAME <%= vars.product_cli %>-VERSION-NUMBER.tgz --reuse-values \
      --set cf.brokerUrl="http://${BROKER_IP}" \
      --set cf.brokerName=<%= vars.product_cli %> \
      --set cf.apiAddress=http://api.SYSTEM-DOMAIN \
      --set cf.client=CF-USERNAME \
      --set cf.clientSecret=CF-PASSWORD \
      --set cf.skipSslValidation=true \
      -n <%= vars.product_short %>-NAMESPACE
    ```

    Where:
    + `RELEASE-NAME` is the name of the release.
    + `SYSTEM-DOMAIN` is the system domain for <%= vars.app_runtime_abbr %>.
    + `CF-USERNAME` is the username for a <%= vars.app_runtime_abbr %> account
       with `cloud_controller.admin` permissions.
    + `CF-PASSWORD` is the password for the <%= vars.app_runtime_abbr %> account.
    + `<%= vars.product_short %>-NAMESPACE` is a name you choose for the <%= vars.product_short %> dedicated namespace.

    **Tips:**
    + You can verify the cf apiAddress by typing the `cf target` command

## <a id="next-steps"></a> Next Steps

After installing and configuring <%= vars.product_short %> see:

* [Using <%= vars.product_full %>](using.html)
