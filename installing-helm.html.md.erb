---
title: Installing and Configuring KSM Using Helm
owner: Platform Engineering (KSM Team)
---
<strong><%= modified_date %></strong>

This topic describes how to install and configure
<%= vars.product_full %> (<%= vars.product_short %>) using Helm.

##<a id="overview"></a>Overview

##<a id="prereq"></a>Prerequisites

Before you install <%= vars.product_short %> using Helm, you must

* If you are using Ingress,
you must install the Ingress controller on the cluster that <%= vars.product_short %> is installed
on. You must also reserved a subdomain for <%= vars.product_short %> in your DNS.
For information about Ingress, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/).
* Configure an S3 bucket. See [Configure Storage](./storage.html#storage).

##<a id='ksm'></a>  Install the <%= vars.product_short %> CLI

To install the <%= vars.product_short %> (Command Line Interface) CLI:

1. Log in and navigate to **<%= vars.product_full %> (<%= vars.product_short %>)** in
[<%= vars.product_network %>](https://network.pivotal.io/).

1. Click **<%= vars.product_cli %>** and download the CLI for your operating system.

1. Rename the downloaded binary file to `ksm`.

1. If you use MacOS or Linux, make the <%= vars.product_short %> binary act as an executable file by running:

    ```
    chmod +x ksm
    ```

1. Move the binary file into your `PATH`.
If you use MacOS or Linux, move the binary file into your `PATH` by running:

    ```
    mv ksm /usr/local/bin/ksm
    ```

##<a id='move-images'></a> Move <%= vars.product_short %> Images

To move your <%= vars.product_short %> images to a private image container registry:

1. Log in and navigate to **<%= vars.product_full %> (<%= vars.product_short %>)** in
[<%= vars.product_network %>](https://network.pivotal.io/).

1. Find `docker pull` commands for the <%= vars.product_short %> images
    by clicking **Image References** for each image.

1. Move the images to your local system by running:

    ```
    docker pull registry.pivotal.io/container-services-manager/chartmuseum:CHARTMUSEUM-VERSION
    docker pull registry.pivotal.io/container-services-manager/broker:VERSION
    docker pull registry.pivotal.io/container-services-manager/daemon:VERSION
    ```
    Where:
    + `VERSION` is the <%= vars.product_short %> release version.
    + `CHARTMUSEUM-VERSION` is the ChartMuseum version.

1. Tag the images for your private container image repository by running:

    ```
    docker tag registry.pivotal.io/container-services-manager/chartmuseum:CHARTMUSEUM-VERSION <registry>/container-services-manager/chartmuseum:CHARTMUSEUM-VERSION
    docker tag registry.pivotal.io/container-services-manager/broker:VERSION <registry>/container-services-manager/broker:VERSION
    docker tag registry.pivotal.io/container-services-manager/daemon:VERSION <registry>/container-services-manager/daemon:VERSION
    ```

1. Push the images to your container image repository:

    ```
    docker push <registry>/container-services-manager/chartmuseum:CHARTMUSEUM-VERSION
    docker push <registry>/container-services-manager/broker:VERSION
    docker push <registry>/container-services-manager/daemon:VERSION
    ```

##<a id='add'></a> Add <%= vars.product_short %> Values

1. Log in and navigate to **<%= vars.product_full %> (<%= vars.product_short %>)** in
[<%= vars.product_network %>](https://network.pivotal.io/).

1. Download the Helm chart TGZ file and unzip it by running:

    ```
    tar zxvf ksm-<version>.tgz
    ```
    The above command creates a new directory named `ksm`.

1.  In the `ksm/values.yaml` file, add the credentials for your S3 bucket using the template below:

    ```
    chartmuseum:
      env:
        open:
          STORAGE_AMAZON_BUCKET: BUCKET-NAME
          STORAGE_AMAZON_ENDPOINT: ENDPOINT
        secret:
          AWS_ACCESS_KEY_ID: ACCESS-KEY
          AWS_SECRET_ACCESS_KEY: SECRET
    s3:
      s3AccessKey: <access key>
      s3Bucket: <bucket name>
      s3Endpoint: <storage.googleapis.com or endpoint>
      s3Secret: <secret>
    ```
   Where:
   + `BUCKET-NAME` is your S3 bucket name
   + `ENDPOINT` is your S3 endpoint. For example, in GCP it would be `storage.googleapis.com`
   + `ACCESS-KEY` is your S3 access key ID.
   + `SECRET` is your S3 secret access key.

1. Edit your `ksm/values.yaml` file to enable service access.
    <%= vars.product_short %> supports LoadBalancer and Ingress for accessing services.
   + **If want your service to be accessed directly using a load balancer,** add the following:

           ```
        broker:
          service:
            type: LoadBalancer
        daemon:
          service:
            type: LoadBalancer
           ```
   + **If want your service to be accessed using Ingress,** add the following:

           ```
        ingress:
          enabled: true
          hosts:
            - INGRESS-DOMAIN
          annotations:
            kubernetes.io/ingress.class: INGRESS-ANNOTATION
           ```
           Where:
         + `INGRESS-DOMAIN` is the name of your provisioned domain.
         + `INGRESS-ANNOTATION` is the annotation required by the Ingress controller.
            Note: your ingress controller might require different annotations

1. Specify a secure password to authenticate your services by adding the following:

     ```
     broker:
       password: BROKER-PASSWORD
     daemon:
       password: DAEMON-PASSWORD
     chartmuseum:
       env:
         open:
           BASIC_AUTH_PASSWORD: CHARTMUSEUM-PASSWORD
     ```

     Where:
     + `BROKER_PASSWORD` is a secure password for the <%= vars.product_short %> broker.
     + `DAEMON_PASSWORD` is a secure password for the <%= vars.product_short %> daemon.
     + `CHARTMUSEUM_PASSWORD` is a secure password for the ChartMuseum.

1. Specify your private container image registry by adding the following:

      ```
      broker:
        image:
          repository: REGISTRY/container-services-manager/broker
          tag: VERSION
      daemon:
        image:
          repository: REGISTRY/container-services-manager/daemon
          tag: VERSION
      chartmuseum:
        image:
          repository: REGISTRY/container-services-manager/chartmuseum
          tag: CHARTMUSEUM-VERSION
      ```
     Where `REGISTRY` is your private container image registry.

1. If you use <%= vars.product_short %> in an air-gapped environment, you must configure a private
   container image registry by adding the following:

    ```
    imageCredentials:
      registry: REGISTRY
      username: REG_USERNAME
      password: REG_PASSWORD
    ```
   Where:
   + `REGISTRY` is the private container image registry you configured to offer images.
   + `REG_USER` is the username for the private container image registry.
   + `REG_PASSWORD` is the password for the private container image registry/

     VMware recommends that you use a private container image registry in production.
       <%= vars.product_short %> modifies the Helm charts that you
       offer to point to images in the private container image registry.

1. If you are using Ingress, you must add your Cloud Foundry environment by adding the following:

    ```
    cf:
      apiAddress: http://api.SYSTEM-DOMAIN
      username: CF-USERNAME
      password: CF-PASSWORD
      brokerName: ksm
      brokerUrl: http://broker.INGRESS-DOMAIN
    ```
   Where:
   + `SYSTEM-DOMAIN` is the system domain for <%= vars.app_runtime_abbr %>.
   + `CF-USERNAME` is your username for <%= vars.app_runtime_abbr %>.
   + `CF-PASSWORD` is your password for <%= vars.app_runtime_abbr %>.
   + `INGRESS-DOMAIN` is the name of your provisioned domain.

##<a id='install'></a> Install the Helm Chart

To install the Helm chart:

1. Install the Helm chart by running:

    ```
    cd ksm/
    helm install RELEASE-NAME .
    ```
    Where:
    + `RELEASE-NAME` is a name you choose for the release.

1. If are using a load balancer, do the following:
   1. Retrieve broker IP address by running:

         ```
         export BROKER_IP=$(kubectl get service ksm-ksm-broker -o=jsonpath='{@.status.loadBalancer.ingress[0].ip}')
         ```
   1. Upgrade your Helm release by running:

         ```
        helm upgrade RELEASE_NAME . --reuse-values \
          --set cf.brokerUrl="http://${BROKER_IP}" \
          --set cf.brokerName=ksm \
          --set cf.apiAddress=http://api.SYSTEM-DOMAIN \
          --set cf.username=CF-USERNAME \
          --set cf.password=CF-PASSWORD
         ```
         Where:
         + `SYSTEM_DOMAIN` is the system domain for <%= vars.app_runtime_abbr %>.
         + `CF-USERNAME` is your username for <%= vars.app_runtime_abbr %>.
         + `CF-PASSWORD` is your password for <%= vars.app_runtime_abbr %>.
         + `RELEASE-NAME` is the name of the release.

         The above commands adds your Cloud Foundry environment to <%= vars.product_short %>.
         
##<a id="considerations"></a>Considerations

* <%= vars.product_short %> uses secrets. Secure those secrets by using a [secret provider](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/).
* <%= vars.product_short %> exposes two services. Enable [network policies](https://kubernetes.io/docs/concepts/services-networking/network-policies/) on the cluster to ensure only appropriate traffic reaches those services.
* You are responsible for securing communications between KSM components using the tooling of your choice. See Service Mesh example.


###<a id="service-mesh"></a>Service Mesh Example
1. Install [Linkerd](https://linkerd.io/2/getting-started/)
   1. There is also a [Helm chart](https://linkerd.io/2/tasks/install-helm/)
1. Add annotations in the KSM Helm chart `values.yaml`
    ```
    broker:
      annotations:
        linkerd.io/inject: enabled
    daemon:
      annotations:
        linkerd.io/inject: enabled
    chartmuseum:
      replica:
        annotations:
          linkerd.io/inject: enabled
    ```
1. Confirm you have correct permissions to run `linkerd tap` on the [cluster](https://linkerd.io/2/tasks/securing-your-cluster)
1. To confirm <%= vars.product_short %>  is meshed,
    ```bash
    linkerd stat deployments -n KSM_NAMESPACE
    ```
    Where:
    + `KSM_NAMESPACE` is the namespace where <%= vars.product_short %> is running
1. To see TLS working on the deployment,
    ```bash
    linkerd -n KSM_NAMESPACE tap deploy/DAEMON_DEPLOYMENT
    ```
   Where:
   + `KSM_NAMESPACE` is the namespace where <%= vars.product_short %> is running
   + `DAEMON_DEPLOYMENT` is the deployment for the daemon. For example, `RELEASE_NAME-ksm-daemon`
