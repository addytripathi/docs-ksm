---
title: Installing and Configuring KSM Using Helm
owner: Platform Engineering (KSM Team)
---
<strong><%= modified_date %></strong>

This topic describes how to install and configure
<%= vars.product_full %> (<%= vars.product_short %>) using Helm.

##<a id="prereq"></a>Prerequisites

Before you install <%= vars.product_short %> using Helm, you must

* If you are using Ingress,
you must install the Ingress controller on the cluster where <%= vars.product_short %> is installed.
You must also reserved a subdomain for <%= vars.product_short %> in your DNS.
For information about Ingress, see the [Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/).
* Configure an external storage solution. See [Configuring External Storage](./storage.html#storage).

##<a id='get'></a> Get <%= vars.product_short %> Resources From <%= vars.product_network %>

You must get resources from <%= vars.product_network %> to install <%= vars.product_short %>.

To get the resources:

1. Log in and navigate to **<%= vars.product_full %> (<%= vars.product_short %>)** in
[<%= vars.product_network %>](https://network.pivotal.io/).

1. Get the following resources:
    + **The <%= vars.product_short %> Command Line Interface (CLI):** Click **CLIs** and download the CLI for your operating system.
    + **Docker `pull` commands:** Click **Image References** for each image and record the commands.
    + **Helm chart TGZ file:** Click **<%= vars.product_short %>.VERSION.tgz** and download the Helm chart
    for <%= vars.product_short %>.

##<a id='cli'></a>  Install the <%= vars.product_short %> CLI

To install the <%= vars.product_short %> Command Line Interface (CLI):

1. Rename the downloaded <%= vars.product_short %> CLI file to `ksm`.

1. Make the <%= vars.product_short %> binary act as an executable file by running:

    ```
    chmod +x ksm
    ```

1. Move the binary file into your `PATH` by running:

    ```
    mv ksm /usr/local/bin/ksm
    ```

##<a id='move-images'></a> Move <%= vars.product_short %> Images

To move your <%= vars.product_short %> images to a private image container registry:


1. Move the images to your local system by running:

    ```
    docker pull registry.pivotal.io/container-services-manager/chartmuseum:CHARTMUSEUM-VERSION
    docker pull registry.pivotal.io/container-services-manager/broker:VERSION
    docker pull registry.pivotal.io/container-services-manager/daemon:VERSION
    ```
    Where:
    + `CHARTMUSEUM-VERSION` is the ChartMuseum version.
        This value is in the `docker pull` command that you recorded in
        [Get <%= vars.product_short %> Resources From <%= vars.product_network %>](#get) above.
    + `VERSION` is the <%= vars.product_short %> release version.
        This value is in the `docker pull` command that you recorded in
        [Get <%= vars.product_short %> Resources From <%= vars.product_network %>](#get) above.
    You recorded the above commands from the  <%= vars.product_network %>.

1. Tag the images for your registry by running:

    ```
    docker tag registry.pivotal.io/container-services-manager/chartmuseum:CHARTMUSEUM-VERSION \
      <registry>/container-services-manager/chartmuseum:CHARTMUSEUM-VERSION

    docker tag registry.pivotal.io/container-services-manager/broker:VERSION \
      <registry>/container-services-manager/broker:VERSION

    docker tag registry.pivotal.io/container-services-manager/daemon:VERSION \
      <registry>/container-services-manager/daemon:VERSION
    ```

1. Push the images to your registry:

    ```
    docker push <registry>/container-services-manager/chartmuseum:CHARTMUSEUM-VERSION
    docker push <registry>/container-services-manager/broker:VERSION
    docker push <registry>/container-services-manager/daemon:VERSION
    ```

##<a id='configure'></a> Configure the <%= vars.product_short %> Helm Chart

To configure the <%= vars.product_short %> Helm chart:

1. Unzip the downloaded <%= vars.product_short %> Helm chart by running:

    ```
    tar zxvf ksm-<version>.tgz
    ```
    The above command creates a new directory named `ksm`.

1.  In the `ksm/values.yaml` file, add the credentials for your S3 bucket using the template below:

    ```
    chartmuseum:
      env:
        open:
          STORAGE_AMAZON_BUCKET: BUCKET-NAME
          STORAGE_AMAZON_ENDPOINT: ENDPOINT
        secret:
          AWS_ACCESS_KEY_ID: ACCESS-KEY
          AWS_SECRET_ACCESS_KEY: SECRET
    s3:
      s3AccessKey: <access key>
      s3Bucket: <bucket name>
      s3Endpoint: <storage.googleapis.com or endpoint>
      s3Secret: <secret>
    ```
   Where:
   + `BUCKET-NAME` is your S3 bucket name
   + `ENDPOINT` is your S3 endpoint. For example, in GCP it would be `storage.googleapis.com`
   + `ACCESS-KEY` is your S3 access key ID.
   + `SECRET` is your S3 secret access key.

1. Edit your `ksm/values.yaml` file to enable service access.
    <%= vars.product_short %> supports LoadBalancer and Ingress for accessing services.
   + **If want your service to be accessed directly using a load balancer,** add the following:

           ```
        broker:
          service:
            type: LoadBalancer
        daemon:
          service:
            type: LoadBalancer
           ```
   + **If want your service to be accessed using Ingress,** add the following:

           ```
        ingress:
          enabled: true
          hosts:
            - INGRESS-DOMAIN
          annotations:
            kubernetes.io/ingress.class: INGRESS-ANNOTATION
           ```
           Where:
         + `INGRESS-DOMAIN` is the name of your provisioned domain.
         + `INGRESS-ANNOTATION` is the annotation required by the Ingress controller.
            Your Ingress controller might require different annotations.

1. Define a secure password to authenticate your services by adding the following:

     ```
     broker:
       password: BROKER-PASSWORD
     daemon:
       password: DAEMON-PASSWORD
     chartmuseum:
       env:
         open:
           BASIC_AUTH_PASSWORD: CHARTMUSEUM-PASSWORD
     ```

     Where:
     + `BROKER_PASSWORD` is a secure password for the <%= vars.product_short %> broker.
     + `DAEMON_PASSWORD` is a secure password for the <%= vars.product_short %> daemon.
     + `CHARTMUSEUM_PASSWORD` is a secure password for the ChartMuseum.

1. Define values for your private container image registry by adding the following:

      ```
      broker:
        image:
          repository: REGISTRY/container-services-manager/broker
          tag: VERSION
      daemon:
        image:
          repository: REGISTRY/container-services-manager/daemon
          tag: VERSION
      chartmuseum:
        image:
          repository: REGISTRY/container-services-manager/chartmuseum
          tag: CHARTMUSEUM-VERSION
      ```
     Where `REGISTRY` is your private container image registry.

1. If you use <%= vars.product_short %> in an air-gapped environment, you must configure a private
   container image registry by adding the following:

    ```
    imageCredentials:
      registry: REGISTRY
      username: REGISTRY-USERNAME
      password: REGISTRY-PASSWORD
    ```
   Where:
   + `REGISTRY` is the registry you configured to offer images.
   + `REGISTRY-USERNAME` is the username for the registry.
   + `REGISTRY-PASSWORD` is the password for the registry.

     VMware recommends that you use a private container image registry in production.
       <%= vars.product_short %> modifies the Helm charts that you
       offer to point to images in the  registry.

1. If you are using Ingress, you must add your Cloud Foundry environment by adding the following:

    ```
    cf:
      apiAddress: http://api.SYSTEM-DOMAIN
      username: CF-USERNAME
      password: CF-PASSWORD
      brokerName: ksm
      brokerUrl: http://broker.INGRESS-DOMAIN
    ```
   Where:
   + `SYSTEM-DOMAIN` is the system domain for <%= vars.app_runtime_abbr %>.
   + `CF-USERNAME` is your username for <%= vars.app_runtime_abbr %>.
   + `CF-PASSWORD` is your password for <%= vars.app_runtime_abbr %>.
   + `INGRESS-DOMAIN` is the name of your provisioned domain.

##<a id='install'></a> Install the Helm Chart

To install the Helm chart:

1. From the root level of the chart, install the Helm chart by running:

    ```
    helm install RELEASE-NAME .
    ```
    Where `RELEASE-NAME` is a name you choose for the release.

1. If are using a load balancer, do the following:
   1. Retrieve the broker IP address by running:

         ```
         export BROKER_IP=$(kubectl get service ksm-ksm-broker -o=jsonpath='{@.status.loadBalancer.ingress[0].ip}')
         ```
   1. Upgrade your Helm release by running:

         ```
        helm upgrade RELEASE-NAME . --reuse-values \
          --set cf.brokerUrl="http://${BROKER_IP}" \
          --set cf.brokerName=ksm \
          --set cf.apiAddress=http://api.SYSTEM-DOMAIN \
          --set cf.username=CF-USERNAME \
          --set cf.password=CF-PASSWORD
         ```
         Where:
         + `RELEASE-NAME` is the name of the release.
         + `SYSTEM-DOMAIN` is the system domain for <%= vars.app_runtime_abbr %>.
         + `CF-USERNAME` is your username for <%= vars.app_runtime_abbr %>.
         + `CF-PASSWORD` is your password for <%= vars.app_runtime_abbr %>.


         The above commands adds your Cloud Foundry environment to <%= vars.product_short %>.

##<a id="security"></a>Configure Security

To configure on your Kubernetes cluster for <%= vars.product_short %>:

1. Secure <%= vars.product_short %> secrets by using a secret provider.
    See [Encrypting Secret Data at Rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/) in the Kubernetes documentation.
1. Enable network policies on the cluster to secure traffic between services.
    See [Network Policies](https://kubernetes.io/docs/concepts/services-networking/network-policies/) in the Kubernetes documentation.
1. Secure traffic between <%= vars.product_short %> components.
For example, you can secure traffic using a service mesh such as [Linkerd](https://linkerd.io/2/getting-started/).
For instructions on how to use Linkerd, see [Configure Service Mesh](#service-mesh) below.


###<a id="service-mesh"></a>Configure Service Mesh

To configure a Linkerd service mesh:

1. Install Linkerd on your Kubernetes cluster using one of the following methods:
      + Install the service mesh using the Linkerd CLI by following the procedures in
      [Getting Started](https://linkerd.io/2/getting-started/) in the Linkerd documentation.
      + Install the service mesh using a Helm chart by following the procedures in
[Installing Linkerd with Helm](https://linkerd.io/2/tasks/install-helm/) in the Linkerd documentation.
1. Add the following annotations in the <%= vars.product_short %> Helm chart `values.yaml` file:

    ```
    broker:
      annotations:
        linkerd.io/inject: enabled
    daemon:
      annotations:
        linkerd.io/inject: enabled
    chartmuseum:
      replica:
        annotations:
          linkerd.io/inject: enabled
    ```
1. Ensure you have the correct permissions to run `linkerd tap` on the cluster by
    following the procedures in the
    [Securing Your Cluster](https://linkerd.io/2/tasks/securing-your-cluster) in the Linkerd documentation.
1. Verify that <%= vars.product_short %> is added to the mesh by running:

    ```
    linkerd stat deployments -n KSM-NAMESPACE
    ```
    Where `KSM-NAMESPACE` is the namespace where <%= vars.product_short %> is running.

1. Verify that TLS is working on the deployment by running:

    ```
    linkerd -n KSM-NAMESPACE tap deploy/DAEMON-DEPLOYMENT
    ```
   Where `DAEMON-DEPLOYMENT` is the deployment for the daemon. For example, `RELEASE-NAME-ksm-daemon`
