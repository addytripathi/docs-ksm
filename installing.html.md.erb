---
title: Installing and Configuring KSM
owner: Platform Engineering (KSM Team)
---
<strong><%= modified_date %></strong>

This topic describes how to install and configure 
<%= vars.product_full %> (<%= vars.product_short %>) for production using Helm.


## <a id="overview"></a> Overview

Helm is a Kubernetes open source package manager.
You can use a Helm chart to install and configure <%= vars.product_short %>.

To install and configure <%= vars.product_short %> using Helm:

1. [Get <%= vars.product_short %> Resources From <%= vars.product_network %>](#get)

1. [Install the <%= vars.product_short %> CLI](#cli)

1. [Replicate <%= vars.product_short %> Images](#replicate-images)

1. [Configure the <%= vars.product_short %> Helm Chart](#configure)

1. [Install the <%= vars.product_short %> Helm Chart](#install)

1. [(Recommended) Configure Security](#security)

1. [(Recommended) Configure Service Mesh](#service-mesh)

1. [(Optional) Install Prometheus](#prometheus)

1. [Next Steps](#next-steps)


## <a id="prereq"></a>Prerequisites

### For <%= vars.product_short %> installation

Before you install <%= vars.product_short %> using Helm:

* **Helm 3 CLI (version 3.2.4 or up):** For information about installing the Helm CLI,
see the [Helm documentation](https://helm.sh/docs/intro/install/).

* **Docker CLI:** For information about installing Docker, see [Docker](https://docs.docker.com/get-docker/).

* **Kubernetes Cluster:** A running Kubernetes cluster. <%= vars.product_short %> supports <%= vars.k8s_runtime_full %> clusters. For information
about <%= vars.k8s_runtime_abbr %>, see [<%= vars.k8s_runtime_full %>](https://docs.pivotal.io/pks/index.html).

* **Kubernetes CLI:** See [Install and Set Up kubectl](https://kubernetes.io/docs/tasks/tools/install-kubectl/)

* **S3 Compatible Storage:** <%= vars.product_short %> requires a S3-compatible bucket to store offered charts and the chart cache.
For more information, see [Configuring External Storage](./storage.html).

* **PostgreSQL database:** <%= vars.product_short %> requires a PostgreSQL metadata. The connection details will be 
 required during the installation.

* **Private Container Image Registry:** You need this to manage container images
in air-gapped environments.
  VMware recommends using a registry in production deployments.
  You can use a registry such as [Harbor](https://network.pivotal.io/products/harbor-container-registry).

* **Verify that a default StorageClass exists on the cluster where you want to install
<%= vars.product_short %>:**
If you are using Tanzu Kubernetes Grid Integrated Edition, see
[Specify a Default StorageClass](https://docs.pivotal.io/tkgi/1-8/volumes.html#default-storage-class).
For more information about Storage Classes, see
[Kubernetes documentation](https://kubernetes.io/docs/concepts/storage/storage-classes/).

* **(Optional) If you are using Ingress, install the Ingress controller on the cluster where you want to install
<%= vars.product_short %>:** You must also reserve a subdomain for <%= vars.product_short %>
in your DNS.
For information about Ingress, see the
[Kubernetes documentation](https://kubernetes.io/docs/concepts/services-networking/ingress/).

### For usage with <%= vars.app_runtime_abbr %>

* **<%= vars.app_runtime_abbr %> Deployment:** A running <%= vars.app_runtime_abbr %> deployment.

* **<%= vars.app_runtime_abbr %> CLI:** See [Cloud Foundry CLI](https://github.com/cloudfoundry/cli)

## <a id='get'></a> Get <%= vars.product_short %> Resources From <%= vars.product_network %>

To get the resources needed from <%= vars.product_network %> to install <%= vars.product_short %>:

1. Log in and navigate to **<%= vars.product_full %> (<%= vars.product_short %>)** in
[<%= vars.product_network %>](https://network.pivotal.io/products/container-services-manager).

1. Get the following resources:
    + **The <%= vars.product_short %> Command Line Interface (CLI):** Click **CLIs** and download
    the CLI for your operating system.
    + **Docker `pull` commands:** Click **Image References** and record the `docker pull`
    commands for the **broker**, **daemon** and **chartmuseum**.  
    You can alternatively download the image `tgz` files from the `images` directory.
    + **Helm chart TGZ file:** Click **ksm-VERSION-NUMBER.tgz** and download the Helm chart
    for <%= vars.product_short %>.
    + **values-production.yaml file:** download the values-production.yaml override configuration file.


## <a id='cli'></a>  Install the <%= vars.product_short %> CLI

To install the <%= vars.product_short %> Command Line Interface (CLI):

1. Rename the downloaded <%= vars.product_short %> CLI file as `ksm`.

1. Make the <%= vars.product_short %> binary act as an executable file by running:

    ```bash
    chmod +x ksm
    ```

1. Move the binary file into your `PATH` by running:

    ```bash
    mv ksm /usr/local/bin/ksm
    ```

1. Ensure <%= vars.product_short %> CLI is properly working:

    ```bash
    ksm version
    ```

## <a id='replicate-images'></a> Replicate <%= vars.product_short %> Images

To replicate your <%= vars.product_short %> images to a private container image registry:

1. Pull the images to your local system by running the `docker pull` commands you recorded in
    [Get <%= vars.product_short %> Resources From <%= vars.product_network %>](#get) above.<br><br>If
    you downloaded the `tgz` files instead of using the `docker pull` commands,
    load those images to your local system by running `docker load -i FILE-PATH`.

1. Tag the images for your registry by running these commands:

    ```bash
    docker tag registry.pivotal.io/container-services-manager/broker:VERSION-NUMBER \
     REGISTRY/container-services-manager/broker:VERSION-NUMBER

    docker tag registry.pivotal.io/container-services-manager/daemon:VERSION-NUMBER \
     REGISTRY/container-services-manager/daemon:VERSION-NUMBER

    docker tag registry.pivotal.io/container-services-manager/chartmuseum:CHARTMUSEUM-VERSION-NUMBER \
     REGISTRY/container-services-manager/chartmuseum:CHARTMUSEUM-VERSION-NUMBER

    ```

    Where:
    + `VERSION-NUMBER` is the <%= vars.product_short %> release version number.
      This value is in the `docker pull` command that you recorded in
      [Get <%= vars.product_short %> Resources From <%= vars.product_network %>](#get) above.
    + `REGISTRY` is the private container image registry you configured for <%= vars.product_short %>.
    + `CHARTMUSEUM-VERSION-NUMBER` is the ChartMuseum version number.
      This value is in the `docker pull` command that you recorded in
      [Get <%= vars.product_short %> Resources From <%= vars.product_network %>](#get) above.

    ##### **Example**   
    ```bash       
    docker tag registry.pivotal.io/container-services-manager/broker:0.10.89 privateregistry.domain.com/container-services-manager/broker:0.10.89
    ```
          
    <p class="note"><strong>Alternative:</strong> If you downloaded the tgz files, you can verify the versions
     by running the `docker images` command and looking at the `TAG` column for each referred image.:
    </p>

1. Push the images to your registry by running these commands:

    ```bash
    docker push REGISTRY/container-services-manager/broker:VERSION-NUMBER
    docker push REGISTRY/container-services-manager/daemon:VERSION-NUMBER
    docker push REGISTRY/container-services-manager/chartmuseum:CHARTMUSEUM-VERSION-NUMBER
    ```

   Where:
   + `REGISTRY` is the private container image registry path. 
   
   ##### **Example** 
   ```bash   
   docker push privateregistry.domain.com/container-services-manager/broker:0.10.89
   ```

## <a id='configure'></a> Configure the <%= vars.product_short %> Helm Chart

To configure the <%= vars.product_short %>, edit the `values-production.yaml` file:

1. Add the credentials for the registry where you replicated the <%= vars.product_short %> images:

    ```yaml
    imageCredentialsForKSMImages:
     registry: REGISTRY
     username: REGISTRY-USERNAME
     password: REGISTRY-PASSWORD
    ```
    Where:
    + `REGISTRY` is the registry you configured for installation images. (**eg.:** privateregistry.domain.com/container-services-manager)
    + `REGISTRY-USERNAME` is the username for the registry.
    + `REGISTRY-PASSWORD` is the password for the registry.
    
    <p><%= vars.product_short %> is using this registry for:</p>
    <ul>
      <li><strong><%= vars.product_short %> installation docker images:</strong> a new secret named
      <code>registrySecretName</code> of type <code>dockerconfigjson</code> is created with these credentials.</li>
    </ul>
    
1. Add the credentials for the registry where the service instance images will come from:
 
   (**note:** service instance refers to the helm chart files that <%= vars.product_short %> will manage as services, 
   eg.: mysql, postgresql, etc-operator, etc.):

    ```yaml
    imageCredentialsForServiceInstances:
     registry: REGISTRY-INSTANCES
     username: REGISTRY-INSTANCES-USERNAME
     password: REGISTRY-INSTANCES-PASSWORD
    ```
    Where:
    + `REGISTRY-INSTANCES` is the registry you configured to offer images. (**eg.:** anotherregistry.domain.com/<project>)
    + `REGISTRY-INSTANCES-USERNAME` is the username for the registry.
    + `REGISTRY-INSTANCES-PASSWORD` is the password for the registry.
    
    <p><%= vars.product_short %> is using this registry for:</p>
    <ul>
      <li><strong>The backing registry for the services that <%= vars.product_short %>
      deploys:</strong> <%= vars.product_short %> modifies the Helm charts that you offer to
      point to images in the registry.</li>
    </ul>
    <p class="note">
      <strong>Note:</strong> Although this configuration is optional, VMware recommends using a
      private container registry in production.
    </p>

1. Define values for your registry by configuring the repository attributes:

    ```yaml
    broker:
     image:
       repository: REGISTRY/container-services-manager/broker
    daemon:
     image:
       repository: REGISTRY/container-services-manager/daemon
    chartmuseum:
     image:
       repository: REGISTRY/container-services-manager/chartmuseum
    ```
    Where:
    + `REGISTRY` is your private container image registry.  (**eg.:** privateregistry.domain.com)

1. Define a secure password to authenticate your services by configuring the password attributes:

    ```yaml
    broker:
     password: BROKER-PASSWORD
    daemon:
     password: DAEMON-PASSWORD
    chartmuseum:
     env:
       open:
         BASIC_AUTH_PASS: CHARTMUSEUM-PASSWORD
    ```

     Where:
     + `BROKER_PASSWORD` is a secure password for the <%= vars.product_short %> broker.
     + `DAEMON_PASSWORD` is a secure password for the <%= vars.product_short %> daemon.
     + `CHARTMUSEUM_PASSWORD` is a secure password for ChartMuseum.

1. Configure the Cloud Foundry environment details:
    ```yaml
    cf:
     apiAddress: http://api.SYSTEM-DOMAIN
     username: CF-USERNAME
     password: CF-PASSWORD
     brokerName: ksm
     brokerUrl: https://broker.INGRESS-DOMAIN
    ```
    Where:
    + `SYSTEM-DOMAIN` is the system domain for <%= vars.app_runtime_abbr %>.
    + `CF-USERNAME` is your username for <%= vars.app_runtime_abbr %>.
    + `CF-PASSWORD` is your password for <%= vars.app_runtime_abbr %>.
    + `INGRESS-DOMAIN` is the name of your provisioned domain.

    **Tips:** 
    + You can verify the cf apiAddress by typing the `cf target` command
 
1. Enable Ingress service access:

    + If you are using your own TLS certificates:
        + Create secrets with TLS certificate data in the same namespace where <%= vars.product_short %> will be installed:
            ```
            kubectl create secret tls daemon-cert --key DAEMON-KEY-FILE --cert DAEMON-CERT-FILE -n  <%= vars.product_short %>-NAMESPACE
            kubectl create secret tls broker-cert --key BROKER-KEY-FILE --cert BROKER-CERT-FILE -n  <%= vars.product_short %>-NAMESPACE
            ```
          Where:
          + `<%= vars.product_short %>-NAMESPACE` is the namespace where <%= vars.product_short %> will be installed
    
    + If you are using an automated certificate management provider, such as [cert-manager](https://cert-manager.io/), follow the
      procedures to install and configure the prerequisites. 
    
    + Add the following to your values file:
        ```yaml
        ingress:
         enabled: true
         hosts:
         - INGRESS-DOMAIN
         annotations:
           ANNOTATION-KEY: ANNOTATION-VALUE
         tls:
         - secretName: daemon-cert
           hosts:
             - daemon.INGRESS-DOMAIN
         - secretName: broker-cert
           hosts:
             - broker.INGRESS-DOMAIN
        ```
        Where:
        + `INGRESS-DOMAIN` is the name of your provisioned domain.
        + `ANNOTATION-KEY` and `ANNOTATION-VALUE` is the annotation required by your Ingress controller.

            These values depend on the Ingress controller and certificate management option you use. For example, annotations for 
            [nginx Ingress controller](https://kubernetes.github.io/ingress-nginx/) and cert-manager would be:
            ```
            annotations:
                kubernetes.io/ingress.class: nginx
                cert-manager.io/issuer: "letsencrypt-prod"
  
1.  Add the credentials for your S3-compatible bucket using the template below:

    ```yaml
    chartmuseum:
      env:
        open:
          STORAGE_AMAZON_BUCKET: BUCKET-NAME
          STORAGE_AMAZON_ENDPOINT: ENDPOINT
        secret:
          AWS_ACCESS_KEY_ID: ACCESS-KEY
          AWS_SECRET_ACCESS_KEY: SECRET
    ```
    Where:
    + `BUCKET-NAME` is your S3 bucket name.
    + `ENDPOINT` is your S3 endpoint. For example, in Google Cloud Platform (GCP) it is `storage.googleapis.com`.
    + `ACCESS-KEY` is your S3 access key ID.
    + `SECRET` is your S3 secret access key.

    <p class="note">
      <strong>Note:</strong> The above credentials are for AWS.
      Depending on your IaaS, the credentials might not be a comprehensive list of the keys you need.
      For example, you might need to add the STORAGE_AMAZON_REGION, if you are not using using the default region, 
      <strong>eg.:</strong>
    </p>
      <pre>
      chartmuseum:
        env:
          open:
            STORAGE_AMAZON_REGION: us-east-1</pre>
    
    <p class="note">
      For more information about configurations, see
      <a href="https://github.com/helm/charts/tree/master/stable/chartmuseum">ChartMuseum Helm Chart</a> in GitHub.
    </p>

1. Specify the PostgreSQL database details:
        ```
        postgresql:
          postgresqlUsername: USERNAME
          postgresqlPassword: PASSWORD
          postgresqlDatabase: DATABASE
          encryptionKey: ENCRYPTION-KEY
          host: HOST
          dbSkipSSL: DB-SKIP-SSL
          caCert: |
            CA-CERT
        ```
        Where:
        + `USERNAME` is the PostgresSQL username.
        + `PASSWORD` is the PostgresSQL password.
        + `DATABASE` is the schema within PostgresSQL where the tables for <%= vars.product_short %> are located.
        + `ENCRYPTION-KEY` is used to symmetrically encrypt sensitive data before you save it in PostgresSQL.
        + `HOST` is the domain for the database.
        + `DB-SKIP-SSL` can be set to `true` when an internal database is used. SSL or TLS should be used through service mesh.
        + `CA-CERT` is the SSL or TLS certificate authority (CA) certificate for
        the PostgresSQL database connection. This certificate is required when `dbSkipSSL` is `false`.

1. Save the `values-production.yaml` file.

## <a id='install'></a> Install the <%= vars.product_short %> Helm Chart

To install the <%= vars.product_short %> Helm chart:

1. From the root level of the chart, install the <%= vars.product_short %> Helm chart by running these commands:

    ```bash
    kubectl create ns <%= vars.product_short %>-NAMESPACE
    helm install RELEASE-NAME ksm-VERSION-NUMBER.tgz  -n <%= vars.product_short %>-NAMESPACE --wait -f values-production.yaml
    ```
    Where:
    + `<%= vars.product_short %>-NAMESPACE` is a name you choose for the <%= vars.product_short %> dedicated namespace.
    + `RELEASE-NAME` is a name you choose for the release.
    + `ksm-VERSION-NUMBER.tgz` is the <%= vars.product_short %> Helm Chart file you downloaded earlier.


## <a id="security"></a> (Recommended) Configure Security

VMware recommends configuring security on your Kubernetes cluster for <%= vars.product_short %>.

To configure security:

1. Secure <%= vars.product_short %> secrets by using a secret provider.
    See [Encrypting Secret Data at Rest](https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/)
    in the Kubernetes documentation.
1. Enable network policies on the cluster to secure traffic between services.
    See [Network Policies](https://kubernetes.io/docs/concepts/services-networking/network-policies/)
    in the Kubernetes documentation.
    Some settings can vary between clouds. For example, in GKE, network policies are not enabled by default.
    For more information, see your cloud-specific documentation.
1. Secure traffic between <%= vars.product_short %> components.
For example, you can secure traffic using a service mesh such as [Linkerd](https://linkerd.io/2/getting-started/).
For instructions on how to use Linkerd, see [Configure Service Mesh](#service-mesh) below.


### <a id="service-mesh"></a> (Recommended) Configure Service Mesh

To configure a Linkerd service mesh:

1. Install Linkerd on your Kubernetes cluster using one of the following methods:
      + Install the service mesh using the Linkerd CLI by following the procedures in
      [Getting Started](https://linkerd.io/2/getting-started/) in the Linkerd documentation.
      + Install the service mesh using a Helm chart by following the procedures in
[Installing Linkerd with Helm](https://linkerd.io/2/tasks/install-helm/) in the Linkerd documentation.

1. Add the following annotations in the <%= vars.product_short %> Helm chart `values-production.yaml` file:

    ```yaml
    broker:
     annotations:
       linkerd.io/inject: enabled
    daemon:
     annotations:
       linkerd.io/inject: enabled
    chartmuseum:
     replica:
       annotations:
         linkerd.io/inject: enabled
     daemon:
       annotations:
         linkerd.io/inject: enabled
     chartmuseum:
       replica:
         annotations:
           linkerd.io/inject: enabled
    ```

1. Ensure you have the correct permissions to run `linkerd tap` on the cluster by
    following the procedures in the
    [Securing Your Cluster](https://linkerd.io/2/tasks/securing-your-cluster) in the Linkerd documentation.

1. Verify that <%= vars.product_short %> is added to the mesh by running:

    ```bash
    linkerd stat deployments -n KSM-NAMESPACE
    ```
    Where `KSM-NAMESPACE` is the namespace where <%= vars.product_short %> is running.

1. Verify that TLS is working on the deployment by running:

    ```bash
    linkerd -n KSM-NAMESPACE tap deploy/DAEMON-DEPLOYMENT
    ```
    Where `DAEMON-DEPLOYMENT` is the deployment for the daemon. For example, `RELEASE-NAME-ksm-daemon`.


## <a id="prometheus"></a> (Optional) Install Prometheus

You can view metrics for <%= vars.product_short %> if you have Prometheus running in the cluster.
You must install Prometheus in each cluster you want to view metrics for.

To install Prometheus to a cluster:

1. Install the Prometheus Helm chart by running these commands:

    ```bash
    kubectl create ns prometheus

    helm install prometheus stable/prometheus -n prometheus
    ```

1. Create a Kubernetes port forward to your local host by running these commands:

    ```
    export POD_NAME=$(kubectl get pods --namespace prometheus -l "app=prometheus,component=server" -o jsonpath="{.items[0].metadata.name}")

    kubectl --namespace prometheus port-forward $POD_NAME 9090
    ```

1. Access the Prometheus UI in your web browser at [http://localhost:9090](http://localhost:9090).

1. To view metrics for KSM, type `{app_kubernetes_io_name="ksm"}` in the expression box and click **Execute**.


## <a id="next-steps"></a> Next Steps
    
    After installing and configuring <%= vars.product_short %>, follow the procedures below:
    
    * [Using <%= vars.product_short %>](using.html)
