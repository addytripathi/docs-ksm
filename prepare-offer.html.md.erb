---
title: Preparing a Service Offering
owner: Platform Engineering (KSM Team)
---

<strong><%= modified_date %></strong>

<%# The below partial is in https://github.com/pivotal-cf/docs-partials %>

<%= partial vars.path_to_partials + '/services/beta-notice',
:locals => {:product_full => vars.product_full, :platform_name => vars.platform_name} %>

This topic describes how to prepare an offered service for <%= vars.product_full %>.

##<a id='using'></a> Overview

<%= vars.product_short %> enables platform operators to offer Helm charts as
on-demand services to developers on <%= vars.pas_full %>.
Before you add a service offering to `cf marketplace`,
you must configure your Helm charts to be compatible with <%=  vars.product_short %>.
You can also  customize your Helm charts to enable additional features.

A service offering can include the following files:

+ **One or more Helm charts:** You must configure a Helm chart to compatible with <%=  vars.product_short %>.
See [Configure Your Helm Charts](#config-helm) below.
+ **A `plans.yml` file and plan configurations:** You use these files to offer
customized plans and override default values.
See [(Optional) Define Plans Configuration](#plans) below.
+ **A `ksm.yaml` file:** This file enables you to offer multiple Helm charts in a single
service offering. You must include this file if you deploy multiple charts or use Operator patterns.
See [(Optional) Offer Multiple Charts in a Single Offering](#multiple-charts) below.
For information about Operators in Kubernetes,
see [Operator pattern](https://kubernetes.io/docs/concepts/extend-kubernetes/operator)
in the Kubernetes documentation.
+ **A bind.yaml:** This file is a template for app binding and service consumption.
See [(Optional) Create Binding Template for App Consumption](prepare-offer.html#env) below.

###<a id='cf-marketplace'></a> Service Offerings in CF Marketplace

Uploading a Helm chart to <%= vars.product_short %> with either a `ksm.yaml` or `plans.yaml` file
overrides the default values for the service offering name, description, and plan names.
These values are displayed when a <% vars.pas_short %> developer runs `cf marketplace`.

The following table describes the values for your service that are used when you upload a Helm chart
without additional configurations, with a `ksm.yaml` file or a `plans.yaml` file:

<table>
  <tr>
    <th width="16%">Additional YAML file</th>
    <th width="25%">Name</th>
    <th>Description</th>
    <th>Plan Name</th>
  </tr>

  <tr>
    <td><strong>None</strong></td>
    <td><code>name</code> value in <code>Chart.yaml</code></td>
    <td><code>description</code> value in <code>Chart.yaml</code></td>
    <td><code>default</code></td>
  </tr>

  <tr>
    <td><strong><code>ksm.yaml</code></strong></td>
    <td><code>marketplace-name</code> value in <code>ksm.yaml</code></td>
    <td>No effect</td>
    <td>No effect</td>
  </tr>

  <tr>
    <td><strong><code>plans.yaml</code></strong></td>
    <td>No effect</td>
    <td>For each plan, <code>description</code> value in <code>plans.yaml</code></td>
    <td>For each plan, <code>name</code> value in <code>plans.yaml</code></td>
  </tr>

</table>

##<a id='prereq'></a> Prerequisites

Before you deploy your service offering, you must:

+ **Install External Dependencies:** If your Helm charts have any external dependencies,
they must be installed before you offer your service.
For example, if your Helm chart requires an Ingress controller to enable service through ingress,
    the Ingress controller must be manually installed onto the cluster. For information
    about Ingress, see [Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/)
    in the Kubernetes documentation.
+ **Load Container Images:** You might have to load your container images into a private
container registry.
See [Load Container Images into a Private Container Registry](#images) below.


##<a id='config-helm'></a> Configure Your Helm Charts

To upload a Helm chart to <%= vars.product_short %>, you must configure the chart to be compatible with <%= vars.product_short %>. For examples of <%= vars.product_short %>-compatible charts,
see [ksm-sample](https://github.com/cf-platform-eng/ksm-sample) on GitHub.

If you do not include a `plans.yaml` or `ksm.yaml`file with your service offering, one plan is offered.
This plan uses the default values for the Helm chart.

To configure your Helm chart to be compatible with <%= vars.product_short %>:

1. Open the `values.yaml` file at the root level of your chart.

1. Edit your `values.yaml` file to configure storage. Edit the `storageClass:` value to correspond to
the storageClass name for your configured Enterprise Pivotal Container Service (PKS) cluster.
The default name for PKS is `standard`.
      For more information,
      see [Configuring and Using PersistentVolumes](https://docs.pivotal.io/runtimes/pks/volumes.html).
      <br><br>

    For example:

    ```yaml
    ...
    persistence:
      enabled: true
      storageClass: "standard"
      ...
    ```

1. Edit your `values.yaml` file to enable service access.
<%= vars.product_short %> supports using a load balancer, Ingress
or ExternalDNS to access services.
    + **If want your service to be accessed directly using a load balancer,** set
    `services.type:` to `LoadBalancer`. For example:

    ```yaml
   ...
   service:
      type: LoadBalancer
      port: 3306
   ...
   ```
    + **If want your service to accessed using Ingress or ExternalDNS:**
    Edit the value of the `hosts.name` to include a templatized value for uniqueness.
    For example:

     ```yaml
    ...
    ingress:
      enabled: true
      hosts:
      - name: "{{ .Release.Name }}.example.com"
    ...
    ```

    For more information,
    see [(Optional) Template Values](#values-templating) below.

    <p class="note"><strong>Note:</strong> The Ingress controller or ExternalDNS
      controller need to be installed and configured manually. For information
      about Ingress, see <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/">Ingress</a>
      in the Kubernetes documentation. For information about
      ExternalDNS, see <a href="https://github.com/kubernetes-incubator/external-dns">external-dns</a> in GitHub.
    </p>

 <%# <!-- TODO: does this belong here or in using section--> %>

<p class="note warning"><strong>Warning:</strong> You cannot change the chart name or
   resize a PersistentVolumeClaim after you add the service offering to <%= vars.product_short %>.
 </p>

##<a id='plans'></a> (Optional) Define Plans Configuration

In `cf marketplace`, each service has a set of plans that developers can provision.
A plan is a template for service instances.
For example, different plans might represent a large or a small instance of a database.

For Kubernetes services, each <%= vars.product_short %> plan represents a set of values overriding
the default values in the Helm chart.
These values are configured in `plans.yaml` at the root level of your chart.
For examples of `plans.yaml` files,
see [kibosh-sample](https://github.com/cf-platform-eng/kibosh-sample/blob/master/sample-charts) on GitHub.

If you want to override the default settings in `values.yaml` and offer custom plans:

1. Create a `plans` subdirectory at the root level of your chart.

1. Create and edit `plans/PLAN-FILE.yaml` with the Helm values that you want to override.
   `PLAN-FILE.yaml` must consist of only lowercase letters, digits, `.`, or `-`.
    <br><br>
    Ensure that the properties you add to `PLAN-FILE.yaml` match the properties
    in `values.yaml` and that you only change the values.
    <br><br>
    For example:

    ```
    ---
    resources:
      requests:
        memory: 128Mi
        cpu: 100m
    ```

1. Create a `plans.yaml` file at the root level of your chart.

1. Edit your `plans.yaml` file to add your custom plan information using the following template:

    ```
    - name: PLAN-NAME
      description: PLAN-DESCRIPTION
      file: PLAN-FILE
    ```

    Where:
    * `PLAN-NAME` is the name of the plan that developers see when they run `cf marketplace`
        The plan name is listed under `plans`.
       Ensure that the plan name is lowercase only and contains no special characters.
    * `PLAN-DESCRIPTION` is the description of the plan that developers see when they run `cf marketplace`.
        The plan description is listed under `description`.
    * `PLAN-FILE` is the name of the plan file in the `plans` subdirectory.

    For example:

    ```
    - name: "small"
      description: "default (small) plan for mysql"
      file: "small.yaml"
    - name: "medium"
      description: "medium sized plan for mysql"
      file: "medium.yaml"
    ```

##<a id='multiple-charts'></a> (Optional) Offer Multiple Charts in a Single Offering

<%= vars.product_short %> enables you to offer multiple Helm charts in a single service offering.
You might want to offer multiple Helm charts in the following cases:

* A cluster-scoped operator or controller where the individual charts are custom resources
* A namespace-scoped operator chart with another chart that represents the custom resource
* A service that uses multiple charts.
For example, a service that uses a data service chart and a monitoring service chart.

To offer a service with multiple Helm charts, you must create a `ksm.yaml` file. The `charts` section in a `ksm.yaml` file is an ordered list of the charts that are included in the service offering.

1. Create a `ksm.yaml` file using the following as a template:

    ```yaml
    marketplace-name: SERVICE-NAME
    charts:
      - chart: CHART-NAME
        version: CHART-VERSION
        offered: OFFERED-VALUE
        scope: SCOPE-VALUE
      - chart: CHART-NAME
        version: CHART-VERSION
        offered: OFFERED-VALUE
        scope: SCOPE-VALUE
    ```

    Where:
    + `SERVICE-NAME` is the name of the service that developers see when they run `cf marketplace`. The service name is listed under `service`.
    + `CHART-NAME` is the name of a chart that you are including in the service offering.
    + `CHART-VERSION` is the version of the chart that you are including in the service offering.
    + `OFFERED-VALUE` is set to either `true` or `false`. For more information, see the below table.
    + `SCOPE-VALUE` is set to either `scope` or `namespace`. For more information, see the below table.

The following table describes the Helm chart configurations in `ksm.yaml`:

<table>
  <tr>
    <th width=13%>Key</th>
    <th width=20% >Values</th>
    <th>Description</th>
  </tr>

  <tr>
    <td><strong><code>scope</code></strong></td>
    <td><code>cluster</code></td>
    <td>If you use this value, the chart is only deployed once on a cluster.
    Subsequent service instances created on the same Kubernetes cluster
    do not cause a cluster-scoped chart to be deployed additional times.
    You can use this scope for operators and controllers that manage multiple
    instances from a single deployment.</td>
  </tr>

  <tr>
    <td></td>
    <td><code>namespace</code></td>
    <td>If you use this value, the chart is deployed on the cluster every time
      the service is created.</td<
  </tr>

  <tr>
    <td><strong><code>offered</code></strong></td>
    <td><code>true</code> | <code>false</code></td>
    <td>Only a single chart can have <code>offered</code> to <code>true</code>.
      The chart that is set to <code>true</code> must also have
      <code>scope</code> set to <code>namespace</code>.
      The offered chart represents the service the user binds to.
      However, you can expose more resources with <code>cf bind-service</code>.</td>

  </tr>

</table>

##<a id='env'></a> (Optional) Create Binding Template for App Consumption

Apps running in <%= vars.pas_full %>  gain access to bound service instances through an environment
variable credentials hash called `VCAP_SERVICES`.
Libraries such as Spring Cloud
Cloud Foundry Connector automatically support services if their credentials in `VCAP_SERVICES` are formatted
in a valid JSON object.

For an example of the requirements for using Spring Cloud
Cloud Foundry Connector with a MySQL service, see
[MySQL](https://cloud.spring.io/spring-cloud-connectors/spring-cloud-cloud-foundry-connector.html#_mysql)
in the Spring Cloud Cloud Foundry Connector documentation.

Chart authors can create a `bind.yaml` file to enable the broker to
return a valid JSON object containing service credentials. This `bind.yaml` file is added
to the root directory of the chart and contains a Jsonnet template.
When a developer binds the service instance to their app,
service credentials are delivered to `VCAP_SERVICES` for app consumption.

For information about Jsonnet templates, see [Jsonnet](https://jsonnet.org).

To create and test a `bind.yaml` file:

1. Add a `bind.yaml` file to the root directory of your chart. <br><br>

    For example, the following `bind.yaml` enables the broker to return
    MySQL credentials in a valid JSON obejct:

    ```yaml
    template: |
      {
        hostname: $.services[0].status.loadBalancer.ingress[0].ip,
        name: $.services[0].name,
        jdbcUrl: "jdbc:mysql://" + self.hostname + "/my_db?user=" + self.username + "&password=" + self.password + "&useSSL=false",
        uri: "mysql://" + self.username + ":" + self.password + "@" + self.hostname + ":" + self.port + "/my_db?reconnect=true",
        password: $.secrets[0].data['mysql-root-password'],
        port: 3306,
        username: "root"
      }
    ```
    <p class="note"><strong>Note:</strong> The values of <code>$.services</code>
      and <code>$.secrets</code> come from the namespace in which the chart is deployed.
      </p>

1. Download the `template-tester` binary from
[kibosh](https://github.com/cf-platform-eng/kibosh/releases/latest) in GitHub.

1. Test that `bind.yaml` is creating a valid JSON object by running the following command:

    ```
    template-tester NAMESPACE bind.yaml
    ```

    Where `NAMESPACE` is the name of the namespace in your cluster where
    your chart is deployed.

    For example:
    <pre class="terminal">$ template-tester default bind.yaml
      {
       "hostname": "192.168.1.1",
       "jdbcUrl": "jdbc&#58;mysql&#58;//192.168.1.1/my&#95;db?user=root&password=ab1cdeFgH3IJKLMN&useSSL=false",
       "name": "kibosh-46588108-0  ba5-4  7c0-ba97-bd76e33af0d1-grafana",
       "password": "ab1cdeFgH3IJKLMN",
       "port": 3306,
       "uri": "mysql&#58;//root&#58;ab1cdeFgH3IJKLMN@192&#46;168&#46;1&#46;1&#58;3306/my&#95;db?reconnect=true",
       "username": "root"
      }</pre>


###<a id='values-templating'></a> (Optional) Template Values

<%# The below distinction is not very clear to me.
For instance what is meant by "the values themselves"? The values in `values.yaml`?
Also: what is the `templating engine`?%>

Helm uses `values.yaml` as a the concrete set of substitutions needed to create a release.
<%= vars.product_short %> uses the values themselves as a template for multiple releases.
This difference can create situations where `values.yaml` needs to go through the Jsonnet templating engine.

For information about Jsonnet templates, see [Jsonnet](https://jsonnet.org)

`values.yaml` might need to go through the Jsonnet templating engine in the following situations:

* When a chart uses Ingress controller. For information
about Ingress, see [Ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/)
in the Kubernetes documentation.
* When there is a unique name, in addition to the release name, required in a chart.

<%= vars.product_short %> runs the values themselves through the  Jsonnet templating engine.
For example, in a chart with ingress hosts, you can edit `values.yaml` to use the release name as the unique
subdomain discriminator in the ingress definition:

```yaml
...
ingress:
  enabled: true
  hosts:
  - name: "{{ .Release.Name }}.example.com"
...
```

The plan-specific values files also go through the templating engine.

##<a id='images'></a> Load Container Images into a Private Container Registry

Pivotal recommends using a private container registry in production.
<%= vars.product_short %> can then modify your Helm charts to point to images in the private
container registry.

If you either of the following applies, you must configure a private
container registry:

+ Your environment is air-gapped and cannot connect to public container registries such as
Docker Hub or Quay.
For information about commonly used public container registries,
see [Docker Hub](https://hub.docker.com/), [Harbor](https://goharbor.io/), and [Quay](https://quay.io/).
+ The images referenced in the Helm chart are not public.


If you do not load your container images in to a private container registry, a developer cannot create a service instance
offered on <%= vars.product_short %>.

To load your container images:

1. Load your container images by following the instructions for your specific container registry.
For example, if you use Harbor, follow the instructions in
[Pulling and pushing images using Docker client](https://github.com/goharbor/harbor/blob/master/docs/user_guide.md#pulling-and-pushing-images-using-docker-client) on GitHub.


1. Confirm that your `values.yaml` file uses either `image`, `images`, or `global.imageRegistry` keys.
   If you use the keys above, <%= vars.product_short %> always
   uses the private registry configured in the tile to fetch your images.

     For example:
  * If you use a chart with a single image:

      ```yaml
      ---
      image: "my-image"
      imageTag: "5.7.14"
      ```
  * If you use a chart with multiple images:

      ```yaml
      ---
      images:
        component1:
          image: "my-first-image"
          imageTag: "5.7.14"
        component2:
          image: "my-second-image"
          imageTag: "1.2.3"
      ```
  * If you use a chart with a global.imageRegistry key:

      ```yaml
      ---
      global:
        imageRegistry: docker.example.com/image-registry
      ```


    If the Helm chart uses a key other than an `image`, `images` or `global.imageRegistry` key,
    then <%= vars.product_short %> does not change
    the image reference used to pull from the private container registry.

1. Configure your private container registry in the <%= vars.product_short %> tile and apply changes.
See [Configure Private Container Registry](./installing.html#container).
