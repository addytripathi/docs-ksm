---
title: Upgrading Tanzu Service Manager
owner: Platform Engineering (TSMGR Team)
---

<%# The below uses the local product variable and math so we do not need to update this page
with every release

current_version = product_info['local_product_version']

previous_version = current_version.to_s.split(".")
previous_version[1] = (previous_version[1].to_i - 1).to_s
previous_version = previous_version.join(".")
%>

<strong><%= modified_date %></strong>

This topic explains how to upgrade <%= vars.product_full %> (<%= vars.product_short %>) using Helm.


## <a id="overview"></a>Overview

<%= partial vars.path_to_partials + "/ksm/incompatible-1-0" %>


### <a id="upgrade-from-beta"></a> Upgrade from Beta (v0.11) to GA (v1.0)

To upgrade from <%= vars.product_short %> v0.11:

1. [Uninstall <%= vars.product_short %>](#uninstall) v0.11.

1. [Install and Configure <%= vars.product_full %>](./installing.html) v1.0.


### <a id="upgrade-ga"></a> Upgrade GA releases

To execute an upgrade between GA releases:

1. [Get <%= vars.product_short %> Resources From <%= vars.product_network %>](./installing.html#get)

1. Follow the steps in [Install the <%= vars.product_short %> CLI](./installing.html#cli) to replace
your current version of <%= vars.product_short %> CLI with the latest version.

1. [Replicate <%= vars.product_short %> Images](./installing.html#replicate-images)

1. Upgrade the <%= vars.product_short %> Helm Chart by running:

    ```bash
    helm upgrade RELEASE-NAME <%= vars.product_cli %>-VERSION-NUMBER.tgz  -n <%= vars.product_short %>-NAMESPACE --wait --reuse-values
    ```
    Where:
    + `<%= vars.product_short %>-NAMESPACE` is a name you previously used as the
    <%= vars.product_short %>-dedicated namespace.
    + `RELEASE-NAME` is the name you previously used as the <%= vars.product_short %> release.
    + `<%= vars.product_cli %>-VERSION-NUMBER.tgz` is the new <%= vars.product_short %> Helm
    chart file you downloaded.


## <a id="uninstall"></a> Uninstall <%= vars.product_short %> v0.11

To uninstall <%= vars.product_short %>:

1. View all of your installed releases across all namespaces by running:

    ```
    helm list --all --all-namespaces
    ```

1. Record the name and namespace of the <%= vars.product_short %> release that you want to uninstall.

1. Remove the Helm installation by running:

    ```
    helm uninstall RELEASE-NAME -n RELEASE-NAMESPACE
    ```
    Where:
    + `RELEASE-NAME` is the name of the <%= vars.product_short %> release that you recorded in the
    previous step.
    + `RELEASE-NAMESPACE` is the namespace of the <%= vars.product_short %> release that you recorded
    in the previous step.

    For example:

    <pre class="terminal">
    helm uninstall my-<%= vars.product_short.downcase %>-release -n <%= vars.product_short.downcase %>-namespace
    </pre>

1. Remove the <%= vars.product_short.downcase %> remaining namespaces by running:

    ```bash
    kubectl delete ns <%= vars.product_short.downcase %>-system
    ```
    ```bash
    kubectl delete ns RELEASE-NAMESPACE
    ```
    Where:
    + `RELEASE-NAMESPACE` is the namespace of the <%= vars.product_short %> release that you recorded
    earlier in this procedure.

1. Delete the custom resources:

    ```bash
    kubectl delete crd bindingmetas.services.tanzu.vmware.com
    ```
    ```bash
    kubectl delete crd clusters.services.tanzu.vmware.com
    ```
    ```bash
    kubectl delete crd instances.services.tanzu.vmware.com
    ```
    ```bash
    kubectl delete crd offers.services.tanzu.vmware.com
    ```

1. Delete `clusterrole` and `clusterrolebinding` as below:

    ```bash
    kubectl delete clusterrole RELEASE-NAME-tsmgr
    ```
    ```bash
    kubectl delete clusterrolebinding RELEASE-NAME-tsmgr
    ```
    Where:
    + `RELEASE-NAME` is the name of the <%= vars.product_short %> release that you recorded earlier
    in the procedure.
